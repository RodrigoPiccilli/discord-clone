generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String   @db.Text
  email     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers   Server[]
  members   Member[]
  channels  Channel[]
}

model Server {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String   @db.Text
  inviteCode String   @db.Text

  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Server_profileId_fkey")

  members    Member[]
  channel    Channel[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id         String     @id @default(uuid())
  role       MemberRole @default(GUEST)

  profileId  String
  profile    Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Member_profileId_fkey")

  serverId   String
  server     Server     @relation(fields: [serverId], references: [id], onDelete: Cascade, map: "Member_serverId_fkey")

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id         String      @id @default(uuid())
  name       String
  type       ChannelType @default(TEXT)

  profileId  String
  profile    Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Channel_profileId_fkey")

  serverId   String
  server     Server      @relation(fields: [serverId], references: [id], onDelete: Cascade, map: "Channel_serverId_fkey")

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([profileId])
  @@index([serverId])
}
